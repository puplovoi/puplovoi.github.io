<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言基础知识</title>
      <link href="/2024/12/30/7f2a165f/"/>
      <url>/2024/12/30/7f2a165f/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语言基础知识"><a href="#C-语言基础知识" class="headerlink" title="C 语言基础知识"></a>C 语言基础知识</h1><blockquote><p>计算机要处理的数据（诸如数字、文字、符号、图形、音频、视频等）是以二进制的形式存放在内存中的。<br>我们将8个比特（Bit）称为一个字节（Byte），并将字节作为最小的可操作单元</p></blockquote><h2 id="一、C-程序基本结构"><a href="#一、C-程序基本结构" class="headerlink" title="一、C 程序基本结构"></a>一、C 程序基本结构</h2><h3 id="（一）程序构成"><a href="#（一）程序构成" class="headerlink" title="（一）程序构成"></a>（一）程序构成</h3><ol><li>头文件<ul><li>概念与作用</li><li>包含方式（<code>#include &lt;文件名&gt;</code>与<code>#include &quot;文件名&quot;</code>）</li></ul></li><li>函数<ul><li>定义与组成（函数头、函数体）</li><li>分类（标准库函数、用户自定义函数）</li></ul></li></ol><h3 id="（二）主函数（main函数）"><a href="#（二）主函数（main函数）" class="headerlink" title="（二）主函数（main函数）"></a>（二）主函数（<code>main</code>函数）</h3><ol><li><strong>程序执行起点</strong></li><li>定义形式<ul><li><code>int main()</code></li><li><code>int main(int argc, char *argv[])</code></li></ul></li><li><strong>返回值意义</strong></li></ol><pre><code class="c">#include &lt;stdio.h&gt;int main() &#123;    printf(&quot;Hello, World!\n&quot;);    return 0;&#125;</code></pre><pre><code class="markdown">以下关于 C 语言主函数的说法正确的是（ ）A. 一个 C 程序可以有多个主函数B. 主函数名可以随意命名C. 主函数是程序执行的起点D. 主函数必须有参数</code></pre><h2 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h2><h3 id="（一）整型"><a href="#（一）整型" class="headerlink" title="（一）整型"></a>（一）整型</h3><ul><li><p>分类：<code>short</code>（短整型）、<code>int</code>（整型）、<code>long</code>（长整型）、<code>long long</code>（更长的长整型），用于表示整数。</p><ul><li><p>二进制</p><p>二进制由 0 和 1 两个数字组成，使用时必须以0b或0B（不区分大小写）开头。</p></li><li><p>八进制</p><p>八进制由 0~7 八个数字组成，使用时必须以0开头（注意是数字 0，不是字母 o）。</p></li><li><p>十进制</p><p>十进制由 0~9 十个数字组成，没有任何前缀，和平时的书写格式一样</p></li><li><p>十六进制</p><p>十六进制由数字 0<del>9、字母 A</del>F 或 a~f（不区分大小写）组成，使用时必须以0x或0X（不区分大小写）开头</p><p>二进制数、八进制数和十六进制数的输出</p><table><thead><tr><th></th><th>short</th><th>int</th><th>long</th></tr></thead><tbody><tr><td>八进制</td><td>%ho</td><td>%o</td><td>%lo</td></tr><tr><td>十进制</td><td>%hd</td><td>%d</td><td>%ld</td></tr><tr><td>十六进制</td><td>%hx 或者 %hX</td><td>%x 或者 %X</td><td>%lx 或者 %lX</td></tr></tbody></table><p>十六进制数字的表示用到了英文字母，有大小写之分，要在格式控制符中体现出来：</p><ul><li>%hx、%x 和 %lx 中的x小写，表明以小写字母的形式输出十六进制数；</li><li>%hX、%X 和 %lX 中的X大写，表明以大写字母的形式输出十六进制数。</li></ul></li></ul></li><li><p>取值范围与内存占用：不同整型类型占用不同字节数，如在常见系统中，<code>short</code>通常占 2 字节，<code>int</code>占 4 字节，<code>long</code>占 4 字节（在某些系统可能占 8 字节），<code>long long</code>占 8 字节。取值范围也因字节数不同而有所差异，例如<code>int</code>的取值范围大致为 -2147483648 到 2147483647。</p></li><li><p>修饰符：<code>signed</code>（有符号）为默认修饰符，可表示正负值；<code>unsigned</code>（无符号）只能表示非负值，能扩大正数的表示范围。例如，<code>unsigned int</code>可表示 0 到 4294967295 之间的数。</p><p>C语言规定，把内存的最高位作为符号位。在符号位中，<strong>用 0 表示正数，用 1 表示负数</strong>。</p><p>无符号数可以以八进制、十进制和十六进制的形式输出，它们对应的格式控制符分别为：</p><table><thead><tr><th></th><th>unsigned short</th><th>unsigned int</th><th>unsigned long</th></tr></thead><tbody><tr><td>八进制</td><td>%ho</td><td>%o</td><td>%lo</td></tr><tr><td>十进制</td><td>%hu</td><td>%u</td><td>%lu</td></tr><tr><td>十六进制</td><td>%hx 或者 %hX</td><td>%x 或者 %X</td><td>%lx 或者 %lX</td></tr></tbody></table><pre><code class="c">unsigned int a = -1;     //a = 4294967295</code></pre></li></ul><h3 id="（二）浮点型（小数）"><a href="#（二）浮点型（小数）" class="headerlink" title="（二）浮点型（小数）"></a>（二）浮点型（小数）</h3><ul><li><p>分类：<code>float</code>（单精度浮点型）、<code>double</code>（双精度浮点型），用于表示带有小数部分的数值。</p></li><li><p>精度与内存占用：<code>float</code>一般占用 4 字节内存，精度约为 6 - 7 位有效数字；<code>double</code>占用 8 字节内存，精度约为 15 - 16 位有效数字。例如，<code>float f = 3.14f;</code>（注意<code>float</code>常量后需加<code>f</code>），<code>double d = 3.141592653589793;</code>。</p></li><li><p>C语言中小数的指数形式为：aEn 或 aen</p><p>a 为尾数部分，是一个十进制数；n 为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于 a×10n。</p><ul><li>2.1E5 &#x3D; 2.1×10 5，其中 2.1 是尾数，5 是指数。</li><li>3.7E-2 &#x3D; 3.7×10-2，其中 3.7 是尾数，-2 是指数。</li><li>0.5E7 &#x3D; 0.5×10 7，其中 0.5 是尾数，7 是指数。</li></ul></li><li><p>小数的输出</p><ul><li><strong>%f 以十进制形式输出 float 类型</strong>。</li><li><strong>%lf 以十进制形式输出 double 类型</strong>。</li><li>%e 以指数形式输出 float 类型，输出结果中的 e 小写。</li><li>%E 以指数形式输出 float 类型，输出结果中的 E 大写。</li><li>%le 以指数形式输出 double 类型，输出结果中的 e 小写。</li><li>%lE 以指数形式输出 double 类型，输出结果中的 E 大写。</li></ul></li></ul><pre><code>底边为a,高为h，都是整型，下列哪个选项能算出三角形面积（      ）A.s = 1/2*a*hB.s = 1/(2*a*h)C.s = 1.0/(2*a*h)D.s = a*h/2</code></pre><h3 id="（三）字符型（char）"><a href="#（三）字符型（char）" class="headerlink" title="（三）字符型（char）"></a>（三）字符型（char）</h3><ul><li><p>字符存储：使用 ASCII 码存储单个字符，每个字符对应一个唯一的整数值，如<code>&#39;A&#39;</code>对应 65，<code>&#39;a&#39;</code>对应 97。</p></li><li><p>字符常量与变量：字符常量用单引号括起来，如<code>&#39;A&#39;</code>、<code>&#39;5&#39;</code>；字符变量用于存储字符常量，如<code>char ch = &#39;A&#39;;</code>。</p><pre><code class="c">#include &lt;stdio.h&gt;int main()&#123;    char c = &#39;a&#39;;    printf(&quot;%d\n&quot;,c);    printf(&quot;%d\n&quot;,&#39;a&#39;);    printf(&quot;%c\n&quot;,c);    printf(&quot;%c\n&quot;,&#39;a&#39;);     return 0;&#125;</code></pre></li></ul><table><thead><tr><th>说 明</th><th>字符型</th><th>短整型</th><th>整型</th><th>长整型</th><th>单精度浮点型</th><th>双精度浮点型</th></tr></thead><tbody><tr><td>数据类型</td><td>char</td><td>short</td><td>int</td><td>long</td><td>float</td><td>double</td></tr><tr><td>长 度</td><td>1</td><td>2</td><td>4</td><td>4</td><td>4</td><td>8</td></tr></tbody></table><h3 id="（四）sizeof操作符"><a href="#（四）sizeof操作符" class="headerlink" title="（四）sizeof操作符"></a>（四）sizeof操作符</h3><p>用于获取数据类型或变量占用字节数，如<code>sizeof(int)</code>返回<code>int</code>类型占用字节数，<code>int num; sizeof num</code>可获取变量<code>num</code>占用字节数（变量名可省略括号）。不同数据类型在不同系统中占用字节数可能不同，一般<code>short</code>占 2 字节，<code>int</code>占 4 字节，<code>long</code>占 8 字节，<code>float</code>占 4 字节，<code>double</code>占 8 字节，<code>char</code>占 1 字节。</p><pre><code class="c">#include &lt;stdio.h&gt;int main() &#123;    int a = 1;    printf(&quot;%d\n&quot;,sizeof a);          //4    printf(&quot;%d\n&quot;,sizeof(int));       //4&#125;</code></pre><h2 id="三、变量与常量"><a href="#三、变量与常量" class="headerlink" title="三、变量与常量"></a>三、变量与常量</h2><h4 id="（一）变量"><a href="#（一）变量" class="headerlink" title="（一）变量"></a>（一）变量</h4><ol><li>初始化<ul><li>int a;创造了一个变量 a，这个过程叫做变量定义。</li><li>a&#x3D;123;把 123 交给了变量 a，这个过程叫做给变量赋值。</li><li><strong>未初始化变量值不确定，使用易致错误</strong>。</li></ul></li><li>作用域与生命周期<ul><li><strong>局部变量</strong>：在函数内或代码块内定义，作用域限于此，如函数内<code>int b = 10;</code>。</li><li><strong>全局变量</strong>：在函数外部定义，作用域从定义处到文件尾，可被多函数使用。</li><li><strong>自动变量</strong>：局部变量默认存储类型，进入作用域创建，离开销毁。</li><li><strong>静态变量</strong>：用<code>static</code>修饰，局部静态变量值会保留，生命周期为程序运行期。</li></ul></li></ol><h4 id="（二）常量"><a href="#（二）常量" class="headerlink" title="（二）常量"></a>（二）常量</h4><ol><li><p>字面常量</p><ul><li><p><strong>整型常量</strong>：如<code>10</code>、<code>-20</code>，有不同进制表示，如<code>0x10</code>（十六进制）。</p></li><li><p><strong>浮点型常量</strong>：<code>3.14</code>、<code>2.718</code>，<code>float</code>型需加<code>f</code>后缀，如<code>3.14f</code>。</p></li><li><p><strong>字符常量</strong>：单引号括起单个字符，如<code>&#39;A&#39;</code>，存储为 ASCII 码值。</p></li><li><p><strong>字符串常量</strong>：双引号括起字符序列，如<code>&quot;Hello&quot;</code>，自动加<code>\0</code>结束符。</p></li></ul></li><li><p>符号常量</p><ul><li><p><strong><code>#define</code>定义宏常量</strong>：<code>#define PI 3.14159</code>，预处理时替换。</p><pre><code class="c">#include &lt;stdio.h&gt;#define A 3+4int main() &#123;    int a = 2 * A / A + A;    printf(&quot;%d\n&quot;, a);    return 0;&#125;// 运行结果为？？？</code></pre></li><li><p><strong><code>const</code>修饰常量</strong>：<code>const int MAX = 100;</code>，定义后值不可改。</p></li></ul></li></ol><h2 id="四、运算符与表达式"><a href="#四、运算符与表达式" class="headerlink" title="四、运算符与表达式"></a>四、运算符与表达式</h2><h3 id="（一）算术运算符"><a href="#（一）算术运算符" class="headerlink" title="（一）算术运算符"></a>（一）算术运算符</h3><ol><li><p><strong>基本运算</strong>：加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>/</code>、取余<code>%</code>。</p></li><li><p><strong>优先级</strong>：先乘除取余，后加减。</p></li><li><p><strong>运算特性</strong>：整数除得整数，浮点数除更精确。</p></li><li><p>当除号两端<strong>都是整数</strong>时，即使定义的变量是浮点数，得出的结果也会是整数（或被截取为整数），除非其中一方<strong>带有小数</strong>。</p><p>示例：</p><pre><code class="C">int a = 9 / 2;printf(&quot;%d\n&quot;, a);//4float b = 9 / 2;printf(&quot;%f\n&quot;, b);//4.000000float c = 9 / 2.0;printf(&quot;%f\n&quot;, c); // 4.500000</code></pre></li></ol><h3 id="（二）关系运算符"><a href="#（二）关系运算符" class="headerlink" title="（二）关系运算符"></a>（二）关系运算符</h3><ol><li><p><strong>比较符号</strong>：大于<code>&gt;</code>、小于<code>&lt;</code>、大于等于<code>&gt;=</code>、小于等于<code>&lt;=</code>、等于<code>==</code>、不等于<code>!=</code>。</p></li><li><p><strong>结果真假</strong>：成立为真（非 0），不成立为假（0）。</p></li></ol><blockquote><p>C语言中，<strong>非零即真</strong></p></blockquote><h3 id="（三）逻辑运算符"><a href="#（三）逻辑运算符" class="headerlink" title="（三）逻辑运算符"></a>（三）逻辑运算符</h3><ol><li><strong>逻辑符号</strong>：逻辑与<code>&amp;&amp;</code>、逻辑或<code>||</code>、逻辑非<code>!</code>。</li><li><strong>求值规则</strong>：<code>&amp;&amp;</code>两边真才真，<code>||</code>有一真即真，<code>!</code>取反。</li></ol><h3 id="（四）赋值运算符"><a href="#（四）赋值运算符" class="headerlink" title="（四）赋值运算符"></a>（四）赋值运算符</h3><ol><li><strong>简单赋值</strong>：<code>=</code>将右侧值赋给左侧变量。</li><li><strong>复合赋值</strong>：如<code>+=</code>、<code>-=</code>等简化写法。</li></ol><h3 id="（五）自增自减运算符"><a href="#（五）自增自减运算符" class="headerlink" title="（五）自增自减运算符"></a>（五）自增自减运算符</h3><ol><li><strong>前置后置</strong>：前置先增减再用值，后置先用值再增减。</li><li><strong>表达式作用</strong>：改变变量值并参与运算。</li></ol><h3 id="（六）条件运算符"><a href="#（六）条件运算符" class="headerlink" title="（六）条件运算符"></a>（六）条件运算符</h3><ol><li><strong>语法结构</strong>：<code>表达式1? 表达式2 : 表达式3</code>。</li><li><strong>条件求值</strong>：表达式 1 真取表达式 2 值，假取表达式 3 值。</li></ol><h3 id="（七）位运算符"><a href="#（七）位运算符" class="headerlink" title="（七）位运算符"></a>（七）位运算符</h3><ol><li>**按位与 &amp;**：对应位都为 1 才得 1。</li><li>**按位或 |**：对应位有 1 就得 1。</li><li><strong>按位异或 ^</strong>：对应位不同得 1。</li><li><strong>按位取反～</strong>：0 变 1，1 变 0。</li><li><strong>移位运算</strong>：左移<code>&lt;&lt;</code>、右移<code>&gt;&gt;</code>，移动二进制位。</li></ol><h3 id="（八）逗号运算符"><a href="#（八）逗号运算符" class="headerlink" title="（八）逗号运算符"></a>（八）逗号运算符</h3><ol><li><strong>运算顺序</strong>：从左到右依次求值。</li><li><strong>最终结果</strong>：取最后一个表达式的值。</li></ol><h3 id="（九）运算符优先级与结合性总结"><a href="#（九）运算符优先级与结合性总结" class="headerlink" title="（九）运算符优先级与结合性总结"></a>（九）运算符优先级与结合性总结</h3><ol><li><strong>优先级</strong>：优先级高先运算，有表格可查。</li><li><strong>结合性</strong>：规定相同优先级运算符运算顺序。</li></ol><h2 id="五、输入输出操作"><a href="#五、输入输出操作" class="headerlink" title="五、输入输出操作"></a>五、输入输出操作</h2><h3 id="（一）标准输入输出函数"><a href="#（一）标准输入输出函数" class="headerlink" title="（一）标准输入输出函数"></a>（一）标准输入输出函数</h3><ol><li><code>printf</code>函数<ul><li><strong>格式控制</strong>：含普通字符与格式说明符，如<code>%d</code> <code>%f</code>等。</li><li><strong>精度控制</strong>：如<code>%.2f</code>控制浮点数小数位。</li><li><strong>宽度控制</strong>：<ul><li><code>%md</code>指定输出宽度m。</li><li><code>%m.nf</code> 指定输出宽度m，保留n位小数</li></ul></li></ul></li><li><code>scanf</code>函数<ul><li><strong>格式匹配</strong>：格式说明符要与输入数据类型一致。</li><li><strong>取址操作</strong>：变量前用<code>&amp;</code>获取地址存输入值。</li><li><strong>缓冲区</strong>：注意输入缓冲区残留数据影响。</li></ul></li></ol><h3 id="（二）字符输入输出函数"><a href="#（二）字符输入输出函数" class="headerlink" title="（二）字符输入输出函数"></a>（二）字符输入输出函数</h3><ol><li><code>getchar</code>函数<ul><li><strong>功能</strong>：从标准输入读单个字符。</li><li><strong>缓冲区</strong>：会读取缓冲区残留字符。</li></ul></li><li><code>putchar</code>函数<ul><li><strong>功能</strong>：向标准输出写单个字符。</li></ul></li></ol><h2 id="六、控制结构"><a href="#六、控制结构" class="headerlink" title="六、控制结构"></a>六、控制结构</h2><h3 id="（一）顺序结构"><a href="#（一）顺序结构" class="headerlink" title="（一）顺序结构"></a>（一）顺序结构</h3><p>程序按语句先后顺序依次执行，无分支与循环，是程序最基础执行方式。</p><h3 id="（二）选择结构"><a href="#（二）选择结构" class="headerlink" title="（二）选择结构"></a>（二）选择结构</h3><ol><li><p><strong>if语句</strong>：</p><ul><li><p><code>if (表达式) 语句;</code>，当表达式值为非零（即逻辑真）时，执行其后语句；若为零（逻辑假），则跳过该语句。例如：</p><pre><code class="c">int num = 10;if (num &gt; 5) &#123;    printf(&quot;数字大于 5\n&quot;); &#125;</code></pre></li><li><p><strong>if - else 形式</strong>：<code>if (表达式) 语句1; else 语句2;</code>，表达式为真执行语句 1，为假执行语句 2。例如：</p><pre><code class="c">int num = 3;if (num &gt; 5) &#123;    printf(&quot;数字大于 5\n&quot;); &#125; else &#123;    printf(&quot;数字小于等于 5\n&quot;); &#125;</code></pre></li><li><p><strong>多重 if - else 嵌套</strong>：适用于多种条件判断场景。格式为：</p><pre><code class="c">if (表达式1) &#123;    语句1; &#125; else if (表达式2) &#123;    语句2; &#125; else &#123;    语句3; &#125;</code></pre><p>例如判断成绩等级：</p><pre><code class="c">int score = 85;if (score &gt;= 90) &#123;    printf(&quot;等级为 A\n&quot;); &#125; else if (score &gt;= 80) &#123;    printf(&quot;等级为 B\n&quot;); &#125; else if (score &gt;= 70) &#123;    printf(&quot;等级为 C\n&quot;); &#125; else &#123;    printf(&quot;等级为 D\n&quot;); &#125;</code></pre></li></ul></li></ol><h3 id="2-switch-case-语句"><a href="#2-switch-case-语句" class="headerlink" title="2. switch - case 语句"></a>2. <strong>switch - case 语句</strong></h3><ul><li><p><strong>适用场景</strong>：用于多分支选择，分值条件多为整型常量或者字符型常量。</p></li><li><p><strong>基本结构</strong>：</p><pre><code class="c">switch (表达式) &#123;    case 常量1:        语句1;        break;    case 常量2:        语句2;        break;    default:        语句3;&#125;</code></pre></li><li><p>表达式的值与各 <code>case</code> 后的常量表达式值比较，若相等则执行对应语句，<code>break</code> 用于跳出 <code>switch</code> 结构。若都不相等，执行 <code>default</code> 后的语句（<code>default</code> 可选）。例如：</p><pre><code class="c">int num = 3;switch (num) &#123;    case 1:        printf(&quot;1\n&quot;);        break;    case 2:        printf(&quot;2\n&quot;);        break;    case 3:        printf(&quot;3\n&quot;);        break;    default:        printf(&quot;4\n&quot;);&#125;</code></pre></li></ul><h3 id="（三）循环结构"><a href="#（三）循环结构" class="headerlink" title="（三）循环结构"></a>（三）循环结构</h3><ol><li><p><code>for</code>循环</p><ul><li><p><strong>语法</strong>：</p><pre><code class="c">for (初始化; 条件判断; 更新) &#123;    循环体;&#125;</code></pre></li><li><p><strong>三部分</strong>：</p><ul><li><p>首先执行初始化表达式，仅执行一次，用于初始化循环控制变量。</p></li><li><p>接着判断条件表达式，若为真（非零值），则执行循环体语句；若为假（零值），循环结束，执行 <code>for</code> 循环之后的语句。</p></li><li><p>执行完循环体后，执行更新表达式，通常用于修改循环控制变量，之后再次判断条件表达式，重复上述过程。</p></li></ul></li><li><p><strong>嵌套</strong>：<code>for</code>循环内包含<code>for</code>循环，实现多层循环。</p></li><li><p><strong>应用场景</strong>：适用于已知循环次数的场景。例如，要遍历数组元素</p><pre><code class="c">int arr[5] = &#123;1, 2, 3, 4, 5&#125;;for (int i = 0; i &lt; 5; i++) &#123;    printf(&quot;%d &quot;, arr[i]);&#125;</code></pre></li></ul></li><li><p><code>while</code>循环</p><ul><li><p><strong>语法</strong>：</p><pre><code class="c">while (条件)&#123;    循环体;&#125;</code></pre></li><li><p><strong>判断</strong>：条件为真反复执行循环体，需避免死循环。</p></li><li><p><strong>应用场景</strong>：适用于不确定循环次数，但根据某个条件决定是否继续循环的场景。例如，从键盘读取整数，直到输入负数时停止</p><pre><code class="c">int num;while (1) &#123;    printf(&quot;请输入一个整数: &quot;);    scanf(&quot;%d&quot;, &amp;num);    if (num &lt; 0) &#123;        break;    &#125;    printf(&quot;输入的数是: %d\n&quot;, num);&#125;</code></pre></li></ul></li><li><p><code>do - while</code>循环</p><ul><li><p><strong>语法</strong>：</p><pre><code class="c">do &#123;    循环体;&#125; while (条件);</code></pre></li><li><p><strong>特点</strong>：先执行循环体，后判断条件，至少执行一次。与<code>while</code>循环判断顺序不同。</p></li><li><p><strong>应用场景</strong>：适用于至少要执行一次循环体的场景。例如，简单的菜单选择程序，无论用户输入是否正确，至少展示一次菜单</p><pre><code class="c">int choice;do &#123;    printf(&quot;1. 选项1\n2. 选项2\n3. 退出\n请选择: &quot;);    scanf(&quot;%d&quot;, &amp;choice);    switch (choice) &#123;        case 1:            printf(&quot;你选择了选项1\n&quot;);            break;        case 2:            printf(&quot;你选择了选项2\n&quot;);            break;        case 3:            printf(&quot;退出程序\n&quot;);            break;        default:            printf(&quot;无效选择，请重新输入\n&quot;);    &#125;&#125; while (choice!= 3);</code></pre></li></ul></li></ol><h3 id="（四）跳转语句"><a href="#（四）跳转语句" class="headerlink" title="（四）跳转语句"></a>（四）跳转语句</h3><ol><li><p><strong>break 语句</strong>：用于立即终止当前循环（<code>for</code>、<code>while</code>、<code>do - while</code>），跳出循环体，执行循环之后的语句。常与条件语句配合使用，提前结束循环。</p></li><li><p><strong>continue 语句</strong>：用于跳过本次循环中剩余的语句，直接开始下一次循环。即当执行到 <code>continue</code> 时，本次循环体中 <code>continue</code> 之后的语句不再执行，直接进行下一次循环的条件判断。</p></li><li><p><strong>goto 语句</strong>：可以无条件跳转到程序中指定的标号处。但由于 <code>goto</code> 语句可能使程序结构混乱，可读性变差，应谨慎使用。例如</p><pre><code class="c">int i = 0;label:if (i &lt; 5) &#123;    printf(&quot;%d &quot;, i);    i++;    goto label;&#125;</code></pre></li></ol><h2 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h2><h3 id="（一）函数定义与声明"><a href="#（一）函数定义与声明" class="headerlink" title="（一）函数定义与声明"></a>（一）函数定义与声明</h3><ul><li><p>函数定义</p><p>：明确函数功能实现。</p><ul><li><strong>格式</strong>：返回类型 函数名 (参数列表) {函数体}</li><li><strong>示例</strong>：<code>int add(int a, int b) &#123; return a + b; &#125;</code></li></ul></li><li><p>函数声明</p><p>：告知编译器函数存在。</p><ul><li><strong>格式</strong>：返回类型 函数名 (参数列表);</li><li><strong>示例</strong>：<code>int add(int a, int b);</code></li></ul></li></ul><h3 id="（二）-函数调用"><a href="#（二）-函数调用" class="headerlink" title="（二） 函数调用"></a>（二） 函数调用</h3><ul><li><p>调用方式</p><p>：使用函数名和实参执行函数。</p><ul><li><strong>示例</strong>：<code>int result = add(3, 5);</code></li></ul></li><li><p>返回值处理</p><p>：接收并使用函数返回结果。</p><ul><li><strong>示例</strong>：<code>printf(&quot;结果: %d\n&quot;, result);</code></li></ul></li></ul><h3 id="（三）-函数参数"><a href="#（三）-函数参数" class="headerlink" title="（三） 函数参数"></a>（三） 函数参数</h3><ul><li>形参与实参<ul><li><strong>形参</strong>：函数定义中参数，如 <code>add</code> 函数的 <code>a</code> 和 <code>b</code>。</li><li><strong>实参</strong>：调用函数时传递的值，如 <code>add(3, 5)</code> 中的 <code>3</code> 和 <code>5</code>。</li></ul></li><li>参数传递方式<ul><li><strong>传值调用</strong>：实参值复制给形参。</li><li><strong>示例</strong>：<code>void change(int num) &#123; num = num + 1; &#125;</code></li><li><strong>传址调用</strong>：传递实参地址。</li><li><strong>示例</strong>：<code>void change(int *num) &#123; *num = *num + 1; &#125;</code></li></ul></li></ul><h3 id="（四）-函数递归"><a href="#（四）-函数递归" class="headerlink" title="（四） 函数递归"></a>（四） 函数递归</h3><ul><li><strong>概念</strong>：函数自身调用自身。</li><li><strong>示例 - 计算阶乘</strong>：</li></ul><pre><code class="c">int factorial(int n) &#123;    if (n == 0 || n == 1)        return 1;    else        return n * factorial(n - 1);&#125;</code></pre><h3 id="（五）函数嵌套调用"><a href="#（五）函数嵌套调用" class="headerlink" title="（五）函数嵌套调用"></a>（五）函数嵌套调用</h3><ul><li><strong>概念</strong>：一个函数内调用另一个函数。</li><li><strong>示例</strong>：</li></ul><pre><code class="c">void inner() &#123; printf(&quot;内部函数\n&quot;); &#125;void outer() &#123; inner(); &#125;</code></pre><h2 id="八、数组与指针进阶"><a href="#八、数组与指针进阶" class="headerlink" title="八、数组与指针进阶"></a>八、数组与指针进阶</h2><h3 id="（一）数组作为函数参数"><a href="#（一）数组作为函数参数" class="headerlink" title="（一）数组作为函数参数"></a>（一）数组作为函数参数</h3><ol><li>一维数组作为参数<ul><li>数组名传参本质是传递首地址。</li><li>形参写法：<code>类型名 数组名[]</code> 或 <code>类型名 *数组名</code>。例如 <code>void func(int arr[])</code> 等价于 <code>void func(int *arr)</code>。</li></ul></li><li>多维数组作为参数<ul><li>二维数组作参数，形参定义如 <code>void func(int arr[][列数])</code>，列数必须明确，以便计算内存偏移。</li></ul></li></ol><h3 id="（二）指针数组与数组指针"><a href="#（二）指针数组与数组指针" class="headerlink" title="（二）指针数组与数组指针"></a>（二）指针数组与数组指针</h3><ol><li>指针数组<ul><li>定义：存储指针的数组，如 <code>int *ptrArr[5];</code>，数组元素为 <code>int</code> 型指针。</li><li>初始化：可逐个赋值，如 <code>ptrArr[0] = &amp;num1;</code>。常用于处理字符串数组，如 <code>char *strArr[] = &#123;&quot;apple&quot;, &quot;banana&quot;&#125;;</code>。</li></ul></li><li>数组指针<ul><li>定义：指向数组的指针，如 <code>int (*arrPtr)[5];</code>，<code>arrPtr</code> 指向含 5 个 <code>int</code> 元素的数组。</li><li>使用：先让指针指向数组，如 <code>int arr[5]; arrPtr = &amp;arr;</code>，通过 <code>(*arrPtr)[i]</code> 访问数组元素。与指针数组区别在于，数组指针是指针，指针数组是数组。</li></ul></li></ol><h3 id="（三）动态内存分配"><a href="#（三）动态内存分配" class="headerlink" title="（三）动态内存分配"></a>（三）动态内存分配</h3><ol><li><p><code>malloc</code>函数</p><ul><li>函数原型：<code>void *malloc(size_t size)</code>，分配指定字节数内存。</li><li>功能：在堆区分配内存，返回指向该内存起始地址的指针。如 <code>int *ptr = (int *)malloc(5 * sizeof(int));</code></li><li>内存分配失败处理：若分配失败，返回 <code>NULL</code>，需进行判断，如 <code>if (ptr == NULL) &#123; /* 处理错误 */ &#125;</code></li></ul></li><li><p><code>free</code>函数</p><ul><li>功能：释放由 <code>malloc</code>、<code>calloc</code>、<code>realloc</code> 分配的内存，如 <code>free(ptr);</code></li><li>避免内存泄漏：使用后及时释放，否则内存无法回收，导致泄漏。</li></ul></li><li><p><code>calloc</code>函数与<code>realloc</code>函数</p><ul><li><strong><code>calloc</code>函数</strong>：原型 <code>void *calloc(size_t nmemb, size_t size)</code>，分配 <code>nmemb</code> 个大小为 <code>size</code> 的连续内存块，并初始化为 0。常用于数组初始化，如 <code>int *arr = (int *)calloc(10, sizeof(int));</code></li><li><strong><code>realloc</code>函数</strong>：原型 <code>void *realloc(void *ptr, size_t size)</code>，调整已分配内存块大小。<code>ptr</code> 为原内存地址，<code>size</code> 为新大小。若原内存后空间足够，直接扩展；否则重新分配并复制数据，返回新地址。如 <code>ptr = (int *)realloc(ptr, 10 * sizeof(int));</code> 可增大 <code>ptr</code> 指向的内存块。</li></ul></li></ol><h2 id="九、字符串处理"><a href="#九、字符串处理" class="headerlink" title="九、字符串处理"></a>九、字符串处理</h2><h3 id="（一）字符串表示"><a href="#（一）字符串表示" class="headerlink" title="（一）字符串表示"></a>（一）字符串表示</h3><ol><li>字符数组<ul><li>定义：用<code>char</code>类型数组存储字符串，如<code>char name[20];</code>。</li><li>初始化：可直接赋值，如<code>char str[] = &quot;Hello&quot;;</code> 。系统自动在末尾加<code>&#39;\0&#39;</code>作为结束标志。</li></ul></li><li>字符串常量<ul><li>概念：由双引号括起来的字符序列，如<code>&quot;world&quot;</code>。</li><li>存储：存于静态存储区，本质是指向首字符的常量指针，内容不可改。</li></ul></li></ol><h3 id="（二）字符串输入输出"><a href="#（二）字符串输入输出" class="headerlink" title="（二）字符串输入输出"></a>（二）字符串输入输出</h3><ol><li><code>printf</code>与<code>scanf</code>函数处理字符串<ul><li><code>printf</code>输出：用<code>%s</code>格式控制符，如<code>printf(&quot;%s&quot;, str);</code> 。</li><li><code>scanf</code>输入：也用<code>%s</code>，但遇空格、制表符、换行符停止，易致缓冲区溢出。</li></ul></li><li><code>gets</code>与<code>puts</code>函数（存在安全风险）<ul><li><code>gets</code>输入：从标准输入读字符串，直到换行符，会读入换行符并以<code>&#39;\0&#39;</code>替换。</li><li><code>puts</code>输出：向标准输出写字符串并自动换行。</li></ul></li></ol><h3 id="（三）字符串处理函数"><a href="#（三）字符串处理函数" class="headerlink" title="（三）字符串处理函数"></a>（三）字符串处理函数</h3><ol><li><code>strlen</code>函数<ul><li>计算字符串长度</li></ul></li><li><code>strcpy</code>、<code>strncpy</code>函数<ul><li>字符串复制</li><li><code>strncpy</code>的安全性</li></ul></li><li><code>strcmp</code>、<code>strncmp</code>函数<ul><li>字符串比较</li></ul></li><li><code>strcat</code>、<code>strncat</code>函数<ul><li>字符串连接</li></ul></li></ol><h2 id="十、预处理指令"><a href="#十、预处理指令" class="headerlink" title="十、预处理指令"></a>十、预处理指令</h2><h3 id="（一）宏定义"><a href="#（一）宏定义" class="headerlink" title="（一）宏定义"></a>（一）宏定义</h3><ol><li><strong>无参宏</strong>：用 <code>#define</code> 定义，如 <code>#define PI 3.14159</code>，预编译时标识符全替换，注意末尾无分号，与常量有别，常量有类型检查。</li><li><strong>带参宏</strong>：格式 <code>#define 宏名(参数列表) 替换文本</code>，如 <code>#define SQUARE(x) ((x) * (x))</code>，参数替换类似函数调用，但无类型检查，留意参数加括号防错误替换。</li></ol><h3 id="（二）文件包含（-include）"><a href="#（二）文件包含（-include）" class="headerlink" title="（二）文件包含（#include）"></a>（二）文件包含（<code>#include</code>）</h3><ul><li><strong>系统头文件</strong>：用 <code>#include &lt;文件名&gt;</code>，编译器从系统目录找，像 <code>#include &lt;stdio.h&gt;</code>，引入标准库功能。</li><li><strong>自定义头文件</strong>：<code>#include &quot;文件名&quot;</code>，先在当前目录找，可组织自定义代码。为防重复包含，用 <code>#ifndef</code>、<code>#define</code>、<code>#endif</code> 组合，如：</li></ul><pre><code class="c">#ifndef _MYHEADER_H_#define _MYHEADER_H_// 头文件内容#endif</code></pre><h3 id="（三）条件编译"><a href="#（三）条件编译" class="headerlink" title="（三）条件编译"></a>（三）条件编译</h3><ul><li><strong>基于宏定义</strong>：<code>#ifdef</code> 检查宏是否定义，<code>#ifndef</code> 相反。如：</li></ul><pre><code class="c">#ifdef DEBUG    // 调试代码#endif</code></pre><ul><li><strong>基于表达式</strong>：<code>#if</code> 后跟常量表达式，<code>#elif</code> 类似 <code>else if</code>，如：</li></ul><pre><code class="c">#if defined(_WIN32)    // Windows 特定代码#elif defined(__linux__)    // Linux 特定代码#endif</code></pre><p>通过条件编译，可依不同条件编译不同代码块。</p><h2 id="十一、其他重要概念"><a href="#十一、其他重要概念" class="headerlink" title="十一、其他重要概念"></a>十一、其他重要概念</h2><h3 id="（一）类型转换"><a href="#（一）类型转换" class="headerlink" title="（一）类型转换"></a>（一）类型转换</h3><ul><li><strong>隐式转换</strong>：算术运算时，小范围类型自动转成大范围类型，如<code>int</code>与<code>float</code>运算，<code>int</code>转<code>float</code>；赋值时，右边值类型向左边变量类型转换，可能损失精度。</li><li><strong>显式转换</strong>：通过 (目标类型) 表达式 的形式强制转换，如<code>int a = (int)3.14;</code>，用于特定需求改变数据类型。</li></ul><h3 id="（二）作用域与存储类别"><a href="#（二）作用域与存储类别" class="headerlink" title="（二）作用域与存储类别"></a>（二）作用域与存储类别</h3><ul><li><strong>作用域</strong>：局部作用域在代码块内，如函数内变量；全局作用域在整个程序，文件内所有函数可访问全局变量。</li><li>存储类别：<ul><li>**<code>auto</code>**：自动变量，默认类别，函数内局部变量多为此类，函数结束释放内存。</li><li>**<code>static</code>**：修饰局部变量，延长生命周期，保持值；修饰全局变量或函数，限制作用域为当前文件。</li><li>**<code>register</code>**：建议编译器将变量存寄存器，提高访问速度，适用于频繁使用变量，如循环计数变量。</li><li>**<code>extern</code>**：声明外部变量，告知编译器变量在别处定义，可跨文件访问。</li></ul></li></ul><h3 id="（三）结构体与指针的结合"><a href="#（三）结构体与指针的结合" class="headerlink" title="（三）结构体与指针的结合"></a>（三）结构体与指针的结合</h3><ul><li><strong>结构体指针</strong>：定义指向结构体的指针，如<code>struct Student *p;</code>，用<code>-&gt;</code>运算符访问成员，如<code>p-&gt;name</code>。</li><li><strong>动态分配</strong>：用<code>malloc</code>等函数为结构体分配内存，如<code>struct Student *s = (struct Student *)malloc(sizeof(struct Student));</code>，使用后需<code>free</code>释放。</li></ul><h1 id="如果大家还有什么问题，可以加我微信问我"><a href="#如果大家还有什么问题，可以加我微信问我" class="headerlink" title="如果大家还有什么问题，可以加我微信问我"></a>如果大家还有什么问题，可以加我微信问我</h1><p><img src="/../image/weixin.jpg" alt="微信" title="微信"></p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言（9-12章）</title>
      <link href="/2024/12/30/e9f78b55/"/>
      <url>/2024/12/30/e9f78b55/</url>
      
        <content type="html"><![CDATA[<ol><li><p>若用数组名作为函数调用的实参，则实际上传递给形参的是 ( )。</p><p>A. 数组中全部元素的值</p><p>B. 数组中第一个元素的值</p><p>C. 数组元素的个数</p><p>D. 数组的首地址</p></li><li><p>在 C 语言中，以下关于数组的说法中正确的是 ( )。</p><p>A. 数组的下标是从 1 开始的</p><p>B. 不带下标的数组名代表数组的首地址，即第一个元素在内存中的地址</p><p>C. 二维数组在内存中是按列的顺序存储的</p><p>D. 数组的大小可以在程序运行中进行改变</p></li><li><p>下列一维数组初始化中正确的是 ( )。</p><p>A. <code>int a[10] = (1, 2, 3, 4, 5);</code></p><p>B. <code>int a[10] = &#123;1, 2, 3, 4, 5&#125;;</code></p><p>C. <code>int a[10] = [1, 2, 3, 4, 5];</code></p><p>D. <code>int a[10] = &#123;1; 2; 3; 4; 5&#125;;</code></p></li><li><p>下面一维数组定义中正确的是 ( )。</p><p>A. <code>int a(5);</code></p><p>B. <code>int a = &#123;1, 2, 3, 4, 5&#125;;</code></p><p>C. <code>int a[5*2];</code></p><p>D. <code>int a[];</code></p></li><li><p>已有定义</p><pre><code>int x[3][3] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;, i;</code></pre><p>则下面语句的输出结果是 ( )。</p><pre><code class="c">for (i = 0; i &lt; 3; i++)  printf(&quot;%2d&quot;, x[i][i]);</code></pre><p>A. 1 4 7</p><p>B. 3 5 7</p><p>C. 1 5 9</p><p>D. 3 6 9</p></li><li><p>要存储字符串常量 “good” 的值，以下初始化形式中不正确的是 ( )。</p><p>A. <code>char s[4] = &#123;&#39;g&#39;, &#39;o&#39;, &#39;o&#39;, &#39;d&#39;&#125;;</code></p><p>B. <code>char s[5] = &#123;&#39;g&#39;, &#39;o&#39;, &#39;o&#39;, &#39;d&#39;, &#39;\0&#39;&#125;;</code></p><p>C. <code>char s[5] = &#123;&quot;good&quot;&#125;;</code></p><p>D. <code>char s[] = &quot;good&quot;;</code></p></li><li><p>以下定义并初始化字符数组中，正确的是 ( )。</p><p>A. <code>char s[] = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;\0&quot;&#125;;</code></p><p>B. <code>char s[] = &#39;abc&#39;;</code></p><p>C. <code>char s[] = &quot;abc&quot;;</code></p><p>D. <code>char s[] = abc;</code></p></li><li><p>以下程序的执行结果为 ( )。</p><pre><code class="c">#include &lt;stdio.h&gt;struct color&#123;  int red;  int green;  int blue;&#125;;int main()&#123;  struct color c = &#123;100, 200, 255&#125;;  printf(&quot;%d\n&quot;, c.green);  return 0;&#125;</code></pre><p>A. 100</p><p>B. 200</p><p>C. 255</p><p>D. 0</p></li><li><p>下列程序的输出结果是 ( )。</p><pre><code class="c">#include &lt;stdio.h&gt;struct abc&#123;  int a, b, c;&#125;;int main()&#123;  struct abc s[2] = &#123;&#123;1, 2, 3&#125;, &#123;4, 5, 6&#125;&#125;;  int t;  t = s[0].a + s[1].b;  printf(&quot;%d\n&quot;, t);  return 0;&#125;</code></pre></li><li><p>c</p><pre><code class="c">struct date&#123;  int year;  int month;&#125;;struct s&#123;  struct date birth;  char name[20];&#125;;struct s x[4] = &#123;&#123;1977, 8, "hangzhou"&#125;, &#123;1975, 9, "Tianjin"&#125;&#125;;</code></pre><p>语句</p><pre><code>printf(&quot;%c,%d\n&quot;, x[1].name[1], x[1].birth.year);</code></pre><p>的输出结果为 ( )。</p><p>A. a,1977</p><p>B. hangzhou,1977</p><p>C. i,1975</p><p>D. Tianjin,1975</p></li><li><pre><code class="c">struct date&#123;  int year;  int month;&#125;;struct s&#123;  struct date birth;  char name[20];&#125;;struct s x[4] = &#123;&#123;1977, 8, "Hangzhou"&#125;, &#123;1975, 9, "Tianjin"&#125;&#125;;</code></pre><p>语句</p><pre><code>printf(&quot;%c,%d\n&quot;, x[1].name[0], x[1].birth.year);</code></pre><p>的输出结果为 ( )。</p><p>A. Hangzhou,1977</p><p>B. T,9</p><p>C. T,1975</p><p>D. Tianjin,1975</p></li><li><p>假设一个<code>int</code>型变量占用 4 个字节，若有定义如下：</p><pre><code class="c">int a[30] = &#123;1, 2, 3, 4, 5&#125;;</code></pre><p>则数组<code>a</code>在内存中占用的字节数是(         )。</p></li><li><pre><code class="c">char s[] = &quot;abc\0de&quot;;printf(&quot;%s&quot;, s);</code></pre><p>上面程序段运行结果是(           )。</p></li><li><pre><code class="c">char s[] = &#123;&#39;a&#39;, &#39;b&#39;, &#39;\0&#39;, &#39;c&#39;, &#39;\0&#39;&#125;;printf(&quot;%s&quot;, s);</code></pre><p>上面程序段运行结果是(           )。</p></li><li><p>阅读下面程序，写出输出结果。</p><pre><code class="c">#include &lt;stdio.h&gt;void fun(char s[], char c1, char c2);int main(void)&#123;  char s[80] = &quot;abcABC&quot;;  fun(s, &#39;a&#39;, &#39;b&#39;);  printf(&quot;%s\n&quot;, s);  return 0;&#125;void fun(char str[], char c1, char c2)&#123;  int i;  for (i = 0; str[i]!= &#39;\0&#39;; i++)  &#123;    if (str[i] == c1)      str[i] = c2;  &#125;&#125;</code></pre></li><li><p>下面程序的功能是求矩阵<code>a</code>的转置矩阵<code>b</code>并将其输出，请将程序填写完整。</p><pre><code class="c">#include &lt;stdio.h&gt;#define M 3#define N 4int main(void)&#123;  int a[M][N] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;, i, j;  [填空1];  for (i = 0; i &lt; N; i++)    for (j = 0; j &lt; M; j++)      [填空2];  printf(&quot;转置后的矩阵b：\n&quot;);  for (i = 0; i &lt; N; i++)  &#123;    for (j = 0; j &lt; M; j++)      printf(&quot;%3d&quot;, b[i][j]);    printf(&quot;\n&quot;);  &#125;  return 0;&#125;</code></pre></li><li><p>下面程序的功能是利用二分查找法在 10 个数中查找 x，请将程序填写完整。</p><pre><code class="c">#include &lt;stdio.h&gt;int Search(int a[], int n, int x);int main(void)&#123;  int a[10] = &#123;3, 4, 7, 9, 10, 12, 16, 21, 23, 26&#125;;  int i, x, p;  printf(&quot;\n 请输入要查找的数：&quot;);  scanf(&quot;%d&quot;, &amp;x);  p = Search(a, 10, x);  if ([填空1])    printf(&quot;在数组中的第 %d 个位置 \n&quot;, p + 1);  else    printf(&quot;未找到!\n&quot;);  return 0;&#125;int Search(int a[], int n, int x)&#123;  int low = 0, high = n - 1, mid;  while (low &lt;= high)  &#123;    mid = (low + high) / 2;    if (x &lt; a[mid])      high = mid - 1;    else if (x &gt; a[mid])      [填空2];    else      return mid;  &#125;  return -1;&#125;</code></pre></li><li><p>以下程序的功能是统计键盘输入字符串的长度。请将程序填写完整。</p><pre><code class="c">#include &lt;stdio.h&gt;int fun(char str[]);int main()&#123;  char s[80];  int c;  printf(&quot;请输入一个字符串：&quot;);  scanf(&quot;%s&quot;, s);  c = fun(s);  printf(&quot;%d\n&quot;, c);  return 0;&#125;int fun(char str[])&#123;  int i = 0, len = 0;  while ([填空1])  &#123;    [填空2];    i++;  &#125;  return len;&#125;</code></pre></li><li><p>以下程序的功能是通过键盘输入一个字符串和一个字符，统计该字符在字符串中出现的次数。请将程序填写完整。</p><pre><code class="c">#include &lt;stdio.h&gt;int main(void)&#123;  char s[80], c;  int i, n = 0;  printf(&quot;请输入一个字符串：&quot;);  [填空1];  printf(&quot;请输入一个字符：&quot;);  scanf(&quot; %c&quot;, &amp;c);  for (i = 0; s[i]!= &#39;\0&#39;; i++)  &#123;    if ([填空2])      n++;  &#125;  printf(&quot;%c在字符串%s中出现了%d次。\n&quot;, c, s, n);  return 0;&#125;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言（7-8章）</title>
      <link href="/2024/12/29/720c3174/"/>
      <url>/2024/12/29/720c3174/</url>
      
        <content type="html"><![CDATA[<ol><li><p>下面程序段的出结果是 ( )。</p><pre><code class="c">int n = 1;while (n &lt;= 5)&#123;  printf(&quot;%d &quot;, n);  n++;&#125;</code></pre><p>A. 1 1 1 1 1</p><p>B. 1 2 3 4 5</p><p>C. 5</p><p>D. 6</p></li><li><p>下列程序段的输出结果是 ( )。</p><pre><code class="c">int i, s = 0;for (i = 1; i &lt;= 5; ++i)  s = s + i;printf(&quot;s=%d\n&quot;, s);</code></pre><p>A. <code>s = 0</code></p><p>B. <code>s = 10</code></p><p>C. <code>s = 11</code></p><p>D. <code>s = 15</code></p></li><li><p>下面程序段执行后，s 的值为 ( )。</p><pre><code class="c">int k, s = 1;for (k = 1; k &lt;= 5; ++k)  s = s * k;</code></pre><p>A. 5</p><p>B. 6</p><p>C. 120</p></li><li><p>下面程序段的运行结果是 ( )。</p><pre><code class="c">int i, sum = 0;for (i = 1; i &lt;= 10; i++)&#123;  if (i == 5)    break;  sum += i;&#125;printf(&quot;%d\n&quot;, sum);</code></pre></li><li><p>下面程序段的运行结果是 ( )。</p><pre><code class="c">int i, sum = 0;for (i = 0; i &lt; 10; i++)&#123;  if (i % 2!= 0)    continue;  sum += i;&#125;printf(&quot;%d&quot;, sum);</code></pre><p>A. 20</p><p>B. 25</p><p>C. 30</p><p>D. 46</p></li><li><p>以下关于函数的叙述中，错误的是 ( )。</p><p>A. 函数未被调用时，系统将不为形参分配内存单元。</p><p>B. 实参与形参的个数应相等，且实参与形参的类型应尽量对应一致。</p><p>C. 当形参是变量时，实参可以是常量、变量或表达式。</p><p>D. 形参可以是常量、变量或表达式。</p></li><li><p>函数调用在程序中出现的位置一般有 3 种方式，下面叙述中错误的是 ( )。</p><p>A. 函数调用可以作为一个函数的实参。</p><p>B. 函数调用可以作为一个函数的形参。</p><p>C. 函数调用可以作为独立的语句存在。</p><p>D. 函数调用可以出现在表达式中。</p></li><li><p>运行下面程序，输出结果是 ( )。</p><pre><code class="c">#include &lt;stdio.h&gt;int Fun(int u, int v);int main()&#123;  int c, a = 2, b = 6;  c = Fun(a, b);  printf(&quot;%d\n&quot;, c);  return 0;&#125;int Fun(int u, int v)&#123;  int w;  w = u + v;  return w;&#125;</code></pre><p>A. 6</p><p>B. 7</p><p>C. 8</p><p>D. 9</p></li><li><p>运行下面程序，输出结果是 ( )。</p><pre><code class="c">#include &lt;stdio.h&gt;void Fun(int x);int main()&#123;  Fun(12 + 5);  return 0;&#125;void Fun(int x)&#123;  printf(&quot;%d\n&quot;, x);&#125;</code></pre><p>A. 12</p><p>B. 13</p><p>C. 17</p><p>D. 18</p></li><li><p>要用<code>sqrt(x)</code>数学函数，需要在程序开始处通过预处理指令引入头文件(          )</p><pre><code class="c">#include &lt;___&gt;</code></pre></li><li><p>下面程序的输出结果是(        )。</p><pre><code class="c">#include &lt;stdio.h&gt;int max(int x, int y);int main(void)&#123;  int a = 20, b = 10, c;  c = max(a, b);  printf(&quot;%d, &quot;, c);  c = max(8, 2 + 3);  printf(&quot;%d&quot;, c);  return 0;&#125;int max(int x, int y)&#123;  int z;  if (x &gt;= y)    z = x;  else    z = y;  return z;&#125;</code></pre></li><li><p>下面程序的运行结果是(        )。</p><pre><code class="c">#include &lt;stdio.h&gt;int fun(int n);int main(void)&#123;  int x = 5, y;  y = fun(x);  printf(&quot;y=%d&quot;, y);  return 0;&#125;int fun(int n)&#123;  if (n == 1)    return 1;  else    return (n + fun(n - 1));&#125;</code></pre></li><li><p>以下程序可实现数列的和<code>sum = 1 - 1/2 + 1/3 - 1/4 + ⋯ + 1/99 - 1/100</code>。请将程序补充完整。</p><pre><code class="c">#include &lt;stdio.h&gt;int main(void)&#123;  [填空1];  int i;  double j = 1.0;  for (i = 1; i &lt;= 100; i++)  &#123;    sum = sum + j / i;    j = [填空2]; // 修改下一项的分子  &#125;  printf(&quot;sum=%f&quot;, sum);  return 0;&#125;</code></pre></li><li><p>下面的程序用递归方法实现了求斐波那契数列的第 n 项。请将程序填写完整。</p><pre><code class="c">#include &lt;stdio.h&gt;int fib(int n);int main(void)&#123;  int n;  printf(&quot;请输入要计算的项数n = &quot;);  scanf(&quot;%d&quot;, &amp;n);  printf(&quot;数列的第%d项是：&quot;, fib(n));  return 0;&#125;int fib(int n)&#123;  if (n == 1 || n == 2)    return([填空1]);  else    return(fib(n - 1)+ fib([填空2]));&#125;</code></pre></li><li><p>下面程序的功能是判断输入的一个整数是不是素数。请将程序填写完整。</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;math.h&gt;int IsPrime(int n);int main(void)&#123;  int m;  printf(&quot;请输入1个非负整数的值：&quot;);  scanf(&quot;%d&quot;, &amp;m);  if (IsPrime([填空1]) == 1)    printf(&quot;%d是素数&quot;, m);&#125;int IsPrime(int n)&#123;  int i, flag = 1;  for (i = 2; i &lt;= [填空2]; i++)  &#123;    if (n % i == 0)    &#123;      flag = 0;      break;    &#125;  &#125;  return flag;&#125;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言（1-6章）</title>
      <link href="/2024/12/29/7379d433/"/>
      <url>/2024/12/29/7379d433/</url>
      
        <content type="html"><![CDATA[<ol><li><p>C 语言程序的基本结构是（ ）。</p><p>A. 函数</p><p>B. 语句</p><p>C. 命令行</p><p>D. 顺序结构</p></li><li><p>C 语言程序是从 ( ) 开始执行的。</p><p>A. main 函数</p><p>B. 第一行代码</p><p>C. 其他函数</p><p>D. 首个函数</p></li><li><p>下面不是 C 语言合法的保留字的是（ ）。</p><p>A. Int</p><p>B. double</p><p>C. float</p><p>D. unsigned</p></li><li><p>以下用户自定义标识符中，合法的是（ ）。</p><p>A. 6fg</p><p>B. long</p><p>C. rand3</p><p>D. a - b</p></li><li><p>#define PI 3.14&#96;属于预处理命令的 ( ) 用法。</p><p>A. 宏定义</p><p>B. 文件包含</p><p>C. 条件编译</p><p>D. 常量</p></li><li><p><code>#include&lt;stdio.h&gt;</code>属于预处理命令的 ( )。</p><p>A. 宏定义</p><p>B. 条件编译</p><p>C. 文件包含</p><p>D. 常量</p></li><li><p>若有语句如下：</p><pre><code class="c">int a, b;a = 21;b = 5;</code></pre><p>则表达式</p><pre><code class="c">b = a + 2 * b</code></pre><p>的值为（ ）。</p><p>A. 5</p><p>B. 21</p><p>C. 115</p><p>D. 31</p></li><li><p>以下赋值表达式中，不正确的是 ( )。</p><p>A. a &#x3D; 3</p><p>B. a + b &#x3D; 3</p><p>C. a &#x3D; b &#x3D; 6</p><p>D. a &#x3D; b + c</p></li><li><p>若有语句如下：</p><pre><code class="c">int a, b;a = 21;b = 6;</code></pre><p>则表达式</p><pre><code>a/b*b + a%b</code></pre><p>的值为（ ）。</p><p>A. 21</p><p>B. 24</p></li><li><p>以下程序段实现了计算两个整数的平均值，请将程序填写完整。</p><pre><code class="c">int a = 3, b = 4;double c;c = __________;printf(&quot;两个数的平均值为:%f&quot;, c);</code></pre><p>A. <code>a + b/2</code></p><p>B. <code>(a + b)/2</code></p><p>C. <code>(a + b)%2</code></p><p>D. <code>(a + b)/2.0</code></p></li><li><p>C 语言中，如有定义 “int a &#x3D; 4, b &#x3D; 5;”，则表达式<code>a &gt; b ||!b</code>的值为 ( )。</p><p>A. 1</p><p>B. 0</p><p>C. false</p><p>D. true</p></li><li><p>C 语言中，若有定义 “int x;”，假如 x 的取值范围为 3 &lt; x &lt; 7，那么下列用来表示该变量范围的形式中错误的是 ( )。</p><p>A. 3 &lt; x &lt; 7</p><p>B. x &gt; 3 &amp;&amp; x &lt; 7</p><p>C. x &#x3D;&#x3D; 4 || x &#x3D;&#x3D; 5 || x &#x3D;&#x3D; 6</p><p>D.!(x &lt;&#x3D; 3) &amp;&amp;!(x &gt;&#x3D; 7)</p></li><li><p>执行下列程序段的结果（ ）。</p><pre><code class="c">int a = 1, b = 1, c = 1;if (a!= b)  c = 0;printf(&quot;c=%d\n&quot;, c);</code></pre><p>A. 0</p><p>B. 1</p><p>C. <code>c=0</code></p><p>D. <code>c=1</code></p></li><li><p>以下程序段的运行结果为（ ）。</p><pre><code class="c">#include &lt;stdio.h&gt;int main(void)&#123;  int a = 1, b = 2, t;  if (a &gt; b)  &#123;    t = a;    a = b;    b = t;  &#125;  printf(&quot;a=%d,b=%d\n&quot;, a, b);  return 0;&#125;</code></pre><p>A. <code>a = 1, b = 2</code></p><p>B. <code>a = 2, b = 1</code></p></li><li><p>以下程序段实现了判断输入整数的奇偶。请将程序填写完整。</p><pre><code class="c">int a;printf(&quot;请输入一个整数: &quot;);scanf(&quot;%d&quot;, &amp;a);if (________________)  printf(&quot;是奇数&quot;);else  printf(&quot;是偶数&quot;);</code></pre><p>A. <code>a % 2!= 0</code></p><p>B. <code>a % 2 == 0</code></p><p>C. <code>a % 2 = 1</code></p><p>D. <code>a % 2!= 1</code></p></li><li><p>分析下面程序段的执行结果。</p><pre><code class="c">int x = 5, y = 0;if (x &lt; 0)  y = 5 * x + 1;else if (x &lt; 5)  y = 2 * x;else  y = x * x;printf(&quot;y=%d&quot;, y);</code></pre><p>A. <code>y = 0</code></p><p>B. <code>y = 6</code></p><p>C. <code>y = 16</code></p><p>D. <code>y = 25</code></p></li><li><p>以下程序的运行结果是 ( )。</p><pre><code class="c">#include &lt;stdio.h&gt;int main()&#123;  int x = 1, a = 0, b = 0;  switch (x)  &#123;  case 1:    a++;    break;  case 2:    b++;    break;  default:    a++;    b++;    break;  &#125;  printf(&quot;a=%d,b=%d&quot;, a, b);&#125;</code></pre><p>A. <code>a = 1, b = 0</code></p><p>B. <code>a = 2, b = 1</code></p><p>C. <code>a = 1, b = 1</code></p><p>D. <code>a = 2, b = 2</code></p></li><li><p>执行下面的代码段之后，输出的是。</p><pre><code class="c">int a = 57;switch (a / 10)&#123;case 10:case 9:  printf(&quot;A&quot;);  break;case 8:  printf(&quot;B&quot;);  break;case 7:case 6:  printf(&quot;C&quot;);  break;default:  printf(&quot;F&quot;);  break;&#125;</code></pre><p>A. A</p><p>B. B</p><p>C. C</p><p>D. F</p></li><li><p>C 语言的控制流程包含顺序结构、选择结构和(           )结构三种基本结构。</p></li><li><p>在 VC 2010 中，执行下面的代码段后，变量 c 的值为 (   )。</p><pre><code class="c">int a, c;a = 3;c = sizeof(a);</code></pre></li><li><p><code>(int) (4.5 + 1.6)</code>计算的结果是 (       )。</p></li><li><p>下面程序的运行结果是(         )。</p><pre><code class="c">#include &lt;stdio.h&gt;int main(void)&#123;  int a = 4, b = 10, c = 3;  if (a &gt; b)    c = a + b;  if (b &gt; c)    c = b * c;  else    c = a * c;  printf(&quot;%d&quot;, c);  return 0;&#125;</code></pre></li><li><p>下面程序运行后，从键盘输入 3 和 5，程序的运行结果是(       )。</p><pre><code class="c">#include &lt;stdio.h&gt;int main(void)&#123;  int x, y;  scanf(&quot;%d%d&quot;, &amp;x, &amp;y);  if (x &gt; y)    x += 2;  else if (x &lt; y)    y += x;  else    y = x;  printf(&quot;%d,%d&quot;, x, y);&#125;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
